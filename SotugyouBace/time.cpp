//=============================================================================
//
// time.h (タイム.h)
// Author : Saito Shian
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "application.h"
#include "renderer.h"
#include "time.h"
#include "game.h"
#include "fade.h"
#include "number.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================

//=============================================================================
// コンストラクタ
//=============================================================================
CTime::CTime()
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CTime::~CTime()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CTime::Init()
{
	//==================================================
	// メンバ変数の初期化
	//==================================================  
	m_nTime = MAX_TIME;				// 時間の値の初期化
	m_nZeroCount = 0;				// 0の数の初期化
	m_nCntTime = 0;

	//数字の生成
	for (int nCnt = 0; nCnt < TIME_DIGIT; nCnt++)
	{
		m_apNumber[nCnt] = CNumber::Create(D3DXVECTOR3(540.0f + (70.0f * nCnt) + 50.0f / 2, 50.0f, 0.0f), 50.0f, 50.0f,CObject::PRIORITY_SCREEN);
	}

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CTime::Uninit()
{
	//メンバ変数の初期化
	for (int nCnt = 0; nCnt < TIME_DIGIT; nCnt++)
	{
		if (m_apNumber[nCnt] != nullptr)
		{
			m_apNumber[nCnt]->Uninit();
			m_apNumber[nCnt] = nullptr;
		}
	}
}

//=============================================================================
// 更新処理
//=============================================================================
void CTime::Update()
{
	//タイムの設定
	SetTime();
}

//=============================================================================
// タイムの設定
//=============================================================================
void CTime::SetTime()
{
	m_nCntTime++;
	// 1秒 = 60f && 残り時間が0より大きい場合
	if (m_nCntTime > 60 && m_nTime > 0)
	{
		m_nTime--;
		m_nCntTime = 0;
	}

	if (m_nTime <= 0)
	{
		CFade::SetFade(CApplication::MODE_RESULT, 0.05f);
	}

	if (m_nTime != 0)
	{
		m_aPosTexU[0] = m_nTime % 1000 / 100;
		m_aPosTexU[1] = m_nTime % 100 / 10;
		m_aPosTexU[2] = m_nTime % 10 / 1;

		for (int nCnt = 0; nCnt < TIME_DIGIT; nCnt++)
		{
			//分割数,何番目か
			m_apNumber[nCnt]->SetTexPos(0.0f, 1.0f, 0.1f * m_aPosTexU[nCnt] + 0.1f, m_aPosTexU[nCnt] * 0.1f);
		}

		// 先頭の0を消す処理
		ZoroCount();
	}
}

//=============================================================================
// 先頭の0を消す処理
//=============================================================================
void CTime::ZoroCount()
{
	if (m_apNumber[m_nZeroCount] != nullptr)
	{
		if (m_aPosTexU[m_nZeroCount] == 0 && m_nTime != 0)
		{
			m_apNumber[m_nZeroCount]->SetCol(D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.0f));
			m_nZeroCount++;
		}
		else if (m_aPosTexU[m_nZeroCount] == 0 && m_nTime == 0)
		{
			m_apNumber[1]->SetTexPos(0.0f, 1.0f, 0.1f, 0.0f);
			m_apNumber[m_nZeroCount]->SetCol(D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.0f));
			m_nZeroCount++;
		}
	}
}

//=============================================================================
// タイムの生成
//=============================================================================
CTime* CTime::Create()
{
	//クラスの生成
	CTime* pTime = new CTime;

	//nullチェック
	if (pTime != nullptr)
	{
		//初期化処理
		pTime->Init();
	}
	else
	{
		assert(false);
	}

	return pTime;
}